Explanation of known bugs / issues below:
If program refuses to compile, odds are that the binary file is corrupted (to fix, hide model>Exam>line 23 and after launching
screen view, pick "Reset Questions" method to fill the missed array with random trivia questions).

***Explanation for part 1*** : Collections, Generics, Iterator, Lambda Expression
For this work we chose to use our Question ArrayList that we use thorough the entire project.
We use this ArrayList almost everywhere along the code. It's located in the model folder, specifically in Exam class.
Exam class is the class that represents our JavaFX model concept, in which we inherit our actual Question ArrayList.

For Q12 we chose to use a TreeSet (Model > Exam > Line 22)
First, we chose to transfer the content of the Question ArrayList into the newly made Set by
running through the questions and creating a new reference for each question before adding it
into the Set array, for the solid reason of avoiding Set from ignoring the duplicates in the ArrayList
(Model > Exam > Line 313-322).
From there, we call our Sort method which transfers Set into List and uses it's listing method with our Comparator (MyComparator)
that sorts according to the length of the question's text, after sorting, List moves the content back to the Set.

For Q13 we chose LinkedHashSet (Model > Exam > Line 23)
We call an Iterator (Model > Exam > Line 334 - 339) that runs through the previous Collection and before adding the content
from the TreeSet into the LinkedHashSet, we call a sorting method that will decide whether the content is a duplicate or not.
This dupe detecting method will decide to ignore the content if it sees two parameters that are the same.
We chose these parameters to be: 1. Question's text length, 2. Question's Simple Class name. (Model > Exam > Line 346-347).

To choose and activate these newly created methods, we added two new options in our project Menu.
When reaching the Screen View page (the page that comes up after clicking the very first big button "Start").
Selecting an option will bring up a 7th and 8th option prior to Exit, these are;
"Turn question into a sorted Collection" AND
"Turn the sorted Collection of questions into a quick and non-dupes Collection".
Pressing either of these options will trigger the newly created methods in this work.



***Explanation for part 2*** : ArrayList, Design patterns, Iterator, Observer:
When reaching the Screen containing the Menu we can notice a menu option called "MyArrayList VS Java's ArrayList",
clicking it will bring the user to a new view that will show how MyArrayList functions in compare to Java's ArrayList.
The "Show My Arraylist" button will immediately create the Iterator we need to print the requested "MyArrayList" in the Text Area below it.
(Model > Exam > line 444).
The "Show Java's ArrayList" button will print the Non-dupes collection that was previously made using Java's iterator.
(Controller > QuestionController > Line 189).

In the main screen view, there's another option, "MyArrayList Iterator With Remove Method", clicking it will bring the user
to a new view that will help to show how the "remove" method functions alongside how Observers and Observable objects work together.
(Model > MyArrayList > Line 69).
Clicking the "Create my Iterator" will thereby create the requested iterator.
Once created, the button "Activate Iterator" will appear alongside it's green-colored label.
and then, clicking the newly appeared button will print the requested Collection.
The "Show Java's ArrayList" button will print the Non-dupes collection from previous part, using Java's iterator.
The "remove" method in MyArrayList's class will straightforwardly remove the first element of the iterator.
and will then move every other element past that index one index backwards, by doing that, we are preventing a hole in the middle of the array.
Once this loop finishes, we proceed to decrease both, count's and current's amounts by 1. (current--, count--).
In the screen view mention above, we can also practice this "remove" method.
Clicking the "remove & update" button after typing an index of the user's choice in the Text Field near it will trigger the "remove" method
and will print the leftover of "MyArrayList", note that the new Indexes are correctly adjusted and shown after removing and updating.
You can compare and practice this method more efficiently if you click Both "Show Java's ArrayList" and triggering the iterator,
so you can see both arrays simultaneously and compare the differences after using the "remove" method.

(Java's iterator @ Model > exam > Line 473)
(My Iterator @ Model > exam > Line 461)



***Explanation for part 2*** : Design Patterns: Command, Memento:
Commands:
controller > Remove
controller > MoveStage
controller > Exit
The remove command can be activated through the "MyArrayList VS Java's ArrayList" View, once creating and running the iterator
we can then proceed to remove the has.next() question from the list. The Remove button has been changed to work through the command design pattern.
Further code review is in QuestionController>Line 101.

The MoveStage command can be activated from anywhere a "Return" button exist throughout the entire project and/or selecting an option from the menu
that brings us to a new view.
This MoveStage command practically triggers the view window swap function
Further code review is in QuestionController, anywhere a "MoveTo..." function exist, for example; Line 42.

The Exit command can be activated from anywhere an "Exit" button exist throughout the entire project and/or from the anywhere a MenuBar is installed,
there is usually also a MenuItem that is named "Quit" that also triggers this command.
This command basically terminates the program.

Regarding the Memento section:
For the memento part we chose to work with the "model > MyArrayList" class to make it possible for the project to memorize the Array of questions
prior to the "remove" command/function.
The memento memorizes and stores the arrays in the stack in QuestionController.
Further code review aside from the MyArrayList class is in QuestionController > Line 109 (For pushing into stack),
and QuestionController > Line 121 (For popping from stack).  



